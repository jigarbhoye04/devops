version: '3.8'

networks:
  helios-network:
    driver: bridge

volumes:
  postgres_data:

services:
  # ==================== DEPENDENCIES ====================
  
  postgres:
    image: postgres:15-alpine
    container_name: helios-postgres
    networks:
      - helios-network
    environment:
      POSTGRES_DB: helios_analytics
      POSTGRES_USER: helios
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U helios"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: helios-redis
    networks:
      - helios-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: helios-zookeeper
    networks:
      - helios-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: helios-kafka
    networks:
      - helios-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==================== SERVICES ====================

  bid-request-handler:
    build:
      context: ./services/bid-request-handler
      dockerfile: Dockerfile
    container_name: helios-bid-handler
    networks:
      - helios-network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
      - "2112:2112"
    environment:
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_BID_REQUESTS: bid_requests
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  user-profile-service:
    build:
      context: ./services/user-profile-service
      dockerfile: Dockerfile
    container_name: helios-user-profile
    networks:
      - helios-network
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "50051:50051"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PROTO_PATH: /app/proto/user_profile.proto
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 50051 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  bidding-logic-service:
    build:
      context: ./services/bidding-logic-service
      dockerfile: Dockerfile
    container_name: helios-bidding-logic
    networks:
      - helios-network
    depends_on:
      kafka:
        condition: service_healthy
      user-profile-service:
        condition: service_healthy
    ports:
      - "8001:8001"
    environment:
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_BID_REQUESTS: bid_requests
      KAFKA_TOPIC_BID_RESPONSES: bid_responses
      KAFKA_CONSUMER_GROUP: bidding-logic-consumers
      USER_PROFILE_SVC_ADDR: user-profile-service:50051
      METRICS_PORT: 8001

  auction-simulator:
    build:
      context: ./services/auction-simulator
      dockerfile: Dockerfile
    container_name: helios-auction-simulator
    networks:
      - helios-network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9001:9001"
    environment:
      KAFKA_BROKER: kafka:29092
      KAFKA_BID_RESPONSE_TOPIC: bid_responses
      KAFKA_AUCTION_OUTCOME_TOPIC: auction_outcomes
      KAFKA_CONSUMER_GROUP: auction-simulator-group
      MIN_BID_THRESHOLD: "0.30"
      WIN_PROBABILITY: "1.0"

  analytics-service-api:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: helios-analytics-api
    networks:
      - helios-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      DJANGO_SECRET_KEY: dev-secret-key-for-testing
      DEBUG: "False"
      ALLOWED_HOSTS: "*"
      DB_NAME: helios_analytics
      DB_USER: helios
      DB_PASSWORD: admin
      DB_HOST: postgres
      DB_PORT: 5432
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_AUCTION_OUTCOMES: auction_outcomes
      KAFKA_CONSUMER_GROUP: analytics-service-group
    command: ["./entrypoint.sh", "api"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/api/outcomes/"]
      interval: 15s
      timeout: 5s
      retries: 3

  analytics-service-consumer:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: helios-analytics-consumer
    networks:
      - helios-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: dev-secret-key-for-testing
      DEBUG: "False"
      ALLOWED_HOSTS: "*"
      DB_NAME: helios_analytics
      DB_USER: helios
      DB_PASSWORD: admin
      DB_HOST: postgres
      DB_PORT: 5432
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_AUCTION_OUTCOMES: auction_outcomes
      KAFKA_CONSUMER_GROUP: analytics-service-group
    command: ["./entrypoint.sh", "consumer"]

  advertiser-dashboard:
    build:
      context: ./services/advertiser-dashboard
      dockerfile: Dockerfile
    container_name: helios-dashboard
    networks:
      - helios-network
    depends_on:
      analytics-service-api:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      ANALYTICS_API_URL: http://analytics-service-api:8000
      NEXT_PUBLIC_ANALYTICS_API_URL: http://localhost:8000
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));\""]
      interval: 15s
      timeout: 5s
      retries: 3
