version: '3.8'

services:
  # 1. Frontend Next.js App
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    networks:
      - app-network

  # 2. User Microservice
  user-service:
    build:
      context: ./services/user-service
    ports:
      - "8081:8080" # Map container port 8080 to host port 8081
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - postgres
      - kafka
    networks:
      - app-network

  # 3. Email Microservice
  email-service:
    build:
      context: ./services/email-service
    ports:
      - "8082:8080" # Map container port 8080 to host port 8082
    environment:
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network

  # 4. PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    networks:
      - app-network

  # 5. Zookeeper (A Kafka dependency)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  # 6. Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - app-network

# Define the network for our services to communicate
networks:
  app-network:
    driver: bridge

# Define the volume to persist database data
volumes:
  postgres-db:
    driver: local